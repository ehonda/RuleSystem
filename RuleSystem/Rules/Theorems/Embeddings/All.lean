import RuleSystem.Rules.Theorems.Embeddings.Negative
import RuleSystem.Rules.Theorems.Embeddings.Positive

namespace Rule

-- ðŸ”® (EA-0)
-- Deprecated, just left in for demo purposes for now
-- TODO: Remove
theorem captureFromSingle_castSucc_subset_castSucc_captureFromSingle
    {n : â„•}
    {rule : Rule n}
  : (rule.captureFromSingle |> Instances.castSucc) âŠ† rule.castSucc.captureFromSingle := by
    cases rule_eq : rule with
      | positive =>
        set rule' : Positive n := âŸ¨rule, isPositive_of_eq_positive rule_eqâŸ©
        subst rule
        exact @Positive.captureFromSingle_castSucc_subset_castSucc_captureFromSingle _ rule'
      | negative =>
        set rule' : Negative n := âŸ¨rule, isNegative_of_eq_negative rule_eqâŸ©
        subst rule
        exact @Negative.captureFromSingle_castSucc_subset_castSucc_captureFromSingle _ rule'

-- ðŸ”® (EA-0')
-- Deprecated, just left in for demo purposes for now
-- TODO: Remove
theorem captureFromSingle_castSucc_subset_castSucc_captureFromSingle'
    {n : â„•}
    {rule : Rule n}
  : (rule.captureFromSingle |> Instances.castSucc) âŠ† rule.castSucc.captureFromSingle :=
    let h := Î» (rule' : Rule n) â†¦ (rule'.captureFromSingle |> Instances.castSucc) âŠ† rule'.castSucc.captureFromSingle
    let h_pos := Î» (rule' : Positive n) â†¦ @Positive.captureFromSingle_castSucc_subset_castSucc_captureFromSingle _ rule'
    let h_neg := Î» (rule' : Negative n) â†¦ @Negative.captureFromSingle_castSucc_subset_castSucc_captureFromSingle _ rule'
    of_forall_positive_of_forall_negative h h_pos h_neg

-- ðŸ”® (EA-0'')
-- This is pretty nice usability wise
theorem captureFromSingle_castSucc_subset_castSucc_captureFromSingle''
    {n : â„•}
    {rule : Rule n}
  : (rule.captureFromSingle |> Instances.castSucc) âŠ† rule.castSucc.captureFromSingle := by
    let h := Î» (rule' : Rule n) â†¦ (rule'.captureFromSingle |> Instances.castSucc) âŠ† rule'.castSucc.captureFromSingle
    apply of_forall_positive_of_forall_negative h
    Â· apply Positive.captureFromSingle_castSucc_subset_castSucc_captureFromSingle
    Â· apply Negative.captureFromSingle_castSucc_subset_castSucc_captureFromSingle

-- ðŸ”® (EA-1)
theorem captureFromSingle_castSucc_ssubset_castSucc_captureFromSingle
    {n : â„•}
    {rule : Rule n}
  : (rule.captureFromSingle |> Instances.castSucc) âŠ‚ rule.castSucc.captureFromSingle := by
    let h := Î» (rule' : Rule n) â†¦ (rule'.captureFromSingle |> Instances.castSucc) âŠ‚ rule'.castSucc.captureFromSingle
    apply of_forall_positive_of_forall_negative h
    Â· apply Positive.captureFromSingle_castSucc_ssubset_castSucc_captureFromSingle
    Â· apply Negative.captureFromSingle_castSucc_ssubset_castSucc_captureFromSingle

-- ðŸ”® (EA-2)
theorem captureFromSingle_castSucc_eq_castSucc_captureFromSingle_sdiff_containingLast
    {n : â„•}
    {rule : Rule n}
  : (rule.captureFromSingle |> Instances.castSucc) = rule.castSucc.captureFromSingle \ Instances.containingLast := by
    let h := Î» (rule' : Rule n) â†¦ (rule'.captureFromSingle |> Instances.castSucc) = rule'.castSucc.captureFromSingle \ Instances.containingLast
    apply of_forall_positive_of_forall_negative h
    Â· apply Positive.captureFromSingle_castSucc_eq_castSucc_captureFromSingle_sdiff_containingLast
    Â· apply Negative.captureFromSingle_castSucc_eq_castSucc_captureFromSingle_sdiff_containingLast

end Rule
